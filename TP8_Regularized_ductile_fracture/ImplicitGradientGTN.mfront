@DSL Implicit;

@Behaviour ImplicitGradientGTN;
@Author Thomas Helfer;
@Date 27 / 08 / 2023;
@Description {
}

@StrainMeasure Hencky;

@Algorithm NewtonRaphson_NumericalJacobian;
@PerturbationValueForNumericalJacobianComputation 1.e-8;
@Epsilon 1.e-14;
@Theta 1;

@Includes{
#include "TFEL/Material/GursonTvergaardNeedleman1982StressCriterion.hxx"
}

@Brick StandardElasticity{young_modulus : 210e3, poisson_ratio : 0.3};

@StateVariable strain p;
p.setGlossaryName("EquivalentPlasticStrain");

@AuxiliaryStateVariable real fg, fn, f;
fg.setEntryName("GrowthPorosity");
fn.setEntryName("NucleationPorosity");
f.setGlossaryName("Porosity");

@AuxiliaryStateVariable strain dk, dw;
dw.setEntryName("PlasticVolumeIncrement");
dk.setEntryName("EquivalentPlasticStrainIncrement");

@AuxiliaryStateVariable strain k_nl;
k_nl.setEntryName("NonLocalEquivalentPlasticStrain");

@AuxiliaryStateVariable real broken;
broken.setGlossaryName("Broken");

@ExternalStateVariable strain dk_nl, dw_nl;
dw_nl.setEntryName("NonLocalPlasticVolumeIncrement");
dk_nl.setEntryName("NonLocalEquivalentPlasticStrainIncrement");

@Parameter stress R0 = 507;
@Parameter stress Rinf = 818;
@Parameter stress b = 9.14;

@Parameter real n_fn = 0.02;
@Parameter real n_en = 0.3;
@Parameter real n_sn = 0.1;

@LocalVariable
    GursonTvergaardNeedleman1982StressCriterionParameters<StressStensor>
        params;
@LocalVariable bool plastic_loading;

@InitLocalVariables {
  constexpr auto eeps = strain(1e-14);
  constexpr auto pi = M_PI;
  const auto seps = young * eeps;
  // update porosities
  const auto An =
      n_fn / (n_sn * sqrt(2 * pi)) *
      exp(-power<2>((k_nl + theta * dk_nl - n_en) / n_sn) / 2);
  const auto dfg = (1 - fg) * dw_nl;
  const auto dfn = An * dk_nl;
  fn += dfn;
  fg += dfg;
  f += dfn + dfg;
  // update non local equivalent plastic strain
  k_nl += (dk_nl + ddk_nl);
  // GTN parameters
  params.f_c = 0.1;
  params.f_r = 0.25;
  params.q_1 = 1.5;
  params.q_2 = 1;
  params.q_3 = 2.25;
  //
  if (f > 0.98 * params.f_r) {
    broken = 1;
  }
  f = min(f, 0.98 * params.f_r);
  // elastic prediction of the equivalent stress
  const auto sigel = computeElasticPrediction();
  const auto seq =
    computeGursonTvergaardNeedleman1982Stress(sigel, f, params, seps);
  // yield surface at the beginning of the time step
  const auto Rel = R0 + (Rinf - R0) * (1-exp(-b * p));
  plastic_loading = seq > Rel;
}

@Integrator {
  constexpr auto eeps = strain(1e-14);
  const auto seps = young * eeps;
  if (!plastic_loading) {
    return true;
  }
  //
  const auto [seq, n, _] =
      computeGursonTvergaardNeedleman1982StressNormal(sig, f, params, seps);
  // split of strain
  feel += (1 - f) * dp * n;
  // plastic part
  const auto p_mts = p + theta * dp;
  const auto R = R0 + (Rinf - R0) * (1-exp(-b * p_mts));
  fp = (seq - R) / young;
  static_cast<void>(_);
}

@UpdateAuxiliaryStateVariables {
  if(!broken){
  dw = trace(deto - deel);
  dk = dp;
  } else {
    dw = 0;
    dk = 0;
  }
}
